#include <SoftwareSerial.h>

SoftwareSerial Serial1(2, 3);  //make RX arduino line is pin 2, make TX arduino line is pin 3.

SoftwareSerial gps(10, 11);

#include <LiquidCrystal.h>

LiquidCrystal lcd(4, 5, 6, 7, 8, 9);

#define x A1
#define y A2
#define z A3

int sendMessage = 0;
int xsample = 0;
int ysample = 0;
int zsample = 0;

#define samples 10
#define minVal -50
#define MaxVal 50

int i = 0, k = 0;
int gps_status = 0;
float latitude = 0;
float logitude = 0;
String Speed = "";
String gpsString = "";
const char *test = "$GPRMC";


double Gx;
double Gy;
double Gz;

void(* resetFunc) (void) = 0;  // declare reset fuction at address 0


void initModule(String cmd, const char *res, int t)

{

  while (1)

  {

    Serial.println(cmd);
    Serial1.println(cmd);

    delay(100);

    while (Serial1.available() > 0) {

      if (Serial1.find(*res)) {
        Serial.println(*res);
        delay(t);
        return;
      } else {
        Serial.println("Error");
      }
    }

    delay(t);
  }
}

void setup() {
  pinMode(11, OUTPUT);
  pinMode(12, INPUT_PULLUP);
  pinMode(13, INPUT);
  pinMode(0, OUTPUT);
  digitalWrite(11, LOW);
  lcd.begin(16, 2);


  lcd.clear();

  // lcd.print("Initiallizing");
  // lcd.setCursor(0, 1);
  // lcd.print("     GPS    ");
  // //delay(90000);

  lcd.clear();
  lcd.print(" Accident Alert  ");
  lcd.setCursor(0, 1);
  lcd.print("     System      ");

  delay(2000);

  gps.begin(9600);
  get_gps();
  show_coordinate();

  delay(2000);



  Serial1.begin(9600);

  Serial.begin(9600);

  lcd.clear();
  // lcd.print(" Accident Alert  ");
  // lcd.setCursor(0, 1);
  // lcd.print("    System       ");
  // delay(2000);
  lcd.clear();
  lcd.print("  Initializing");
  lcd.setCursor(0, 1);
  lcd.print("      GSM    ");

  delay(1000);

  Serial.println("Initializing....");
  initModule("AT", "OK", 1000);
  initModule("ATE1", "OK", 1000);
  initModule("AT+CPIN?", "READY", 1000);
  initModule("AT+CMGF=1", "OK", 1000);
  initModule("AT+CNMI=2,2,0,0,0", "OK", 1000);

  Serial.println("Initialized Successfully");
  lcd.clear();
  lcd.print("Initialized");
  lcd.setCursor(0, 1);
  lcd.print("Successfully");

  delay(2000);

  lcd.clear();

  lcd.print("Callibrating ");
  lcd.setCursor(0, 1);
  lcd.print("Accelerometer");

  // for (int i = 0; i < samples; i++) {
  //   xsample += analogRead(x);
  //   ysample += analogRead(y);
  //   zsample += analogRead(z);
  // }

  // xsample /= samples;
  // ysample /= samples;
  // zsample /= samples;

  // Serial.println(xsample);
  // Serial.println(ysample);
  // Serial.println(zsample);

  // delay(1000);

  // lcd.clear();

  // lcd.print("Initiallizing");
  // lcd.setCursor(0, 1);
  // lcd.print("     GPS    ");
  // //delay(90000);

  // lcd.clear();
  // lcd.print("Waiting For GPS");
  // lcd.setCursor(0, 1);
  // lcd.print("     Signal    ");

  // delay(2000);

  gps.begin(9600);
  get_gps();
  show_coordinate();

  // delay(2000);

  lcd.clear();
  lcd.print("GPS is Ready");
  delay(1000);

  lcd.clear();
  lcd.print("System Ready");
  Serial.println("System Ready..");
}

void loop()

{
  digitalWrite(11, LOW);

  //  int value1 = analogRead(x);
  //  int value2 = analogRead(y);
  //  int value3 = analogRead(z);
  //
  //  int xValue = xsample - value1;
  //  int yValue = ysample - value2;
  //  int zValue = zsample - value3;
  //
  //
  //  Gx=xValue/67.584;
  //  Gy=yValue/67.584;
  //  Gz=zValue/67.584;
  //
  //  int maxout = 2;
  //  int minout = 0-maxout;

  //  Serial.print("x=");
  //  Serial.println(xValue);
  //  Serial.print("y=");
  //  Serial.println(yValue);
  //  Serial.print("z=");
  //  Serial.println(zValue);
  //  Serial.println(digitalRead(12));
  int x_adc_value, y_adc_value, z_adc_value;
  double x_g_value, y_g_value, z_g_value;
  double roll, pitch, yaw;
  x_adc_value = analogRead(x); /* Digital value of voltage on x_out pin */
  y_adc_value = analogRead(y); /* Digital value of voltage on y_out pin */
  z_adc_value = analogRead(z); /* Digital value of voltage on z_out pin */
  Serial.print("x = ");
  Serial.print(x_adc_value);
  Serial.print("\t\t");
  Serial.print("y = ");
  Serial.print(y_adc_value);
  Serial.print("\t\t");
  Serial.print("z = ");
  Serial.print(z_adc_value);
  Serial.print("\t\t");
  //delay(100);

  x_g_value = ((((double)(x_adc_value * 5) / 1024) - 1.65) / 0.330); /* Acceleration in x-direction in g units */
  y_g_value = ((((double)(y_adc_value * 5) / 1024) - 1.65) / 0.330); /* Acceleration in y-direction in g units */
  z_g_value = ((((double)(z_adc_value * 5) / 1024) - 1.80) / 0.330); /* Acceleration in z-direction in g units */

  roll = (((atan2(y_g_value, z_g_value) * 180) / 3.14) + 180);  /* Formula for roll */
  pitch = (((atan2(z_g_value, x_g_value) * 180) / 3.14) + 180); /* Formula for pitch */
  //yaw = ( ( (atan2(x_g_value,y_g_value) * 180) / 3.14 ) + 180 ); /* Formula for yaw */
  /* Not possible to measure yaw using accelerometer. Gyroscope must be used if yaw is also required */
  Serial.print("Pitch = ");
  Serial.print(pitch);
  Serial.print("\n\n");

  bool bump = false;
  bool crash = false;
  delay(10);
  if (digitalRead(13) == LOW) {
    Serial.println("Bump detected");
    bump = true;
  } else {
    delay(10);
  }

  if ((pitch < 125 || pitch > 245) && bump) {
    get_gps();
    show_coordinate();

    analogWrite(A5, 255);

    lcd.clear();
    lcd.print("Please wait...");
    Serial.println("Sending SMS");

    for (int i = 10; i >= 0; i--) {
      //      delay(1000);
      //      if(i%2==0)
      //      {
      //      delay(250);
      //      digitalWrite(11, HIGH);
      //      delay(250);
      //      digitalWrite(11, LOW);
      //      delay(250);
      //      digitalWrite(11, HIGH);
      //      delay(250);
      //      digitalWrite(11, LOW);
      //      }
      //      else
      //      delay(1000);

      Serial.println("Waiting ");
      Serial.print(i);
      Serial.print(" Seconds");
      lcd.clear();
      lcd.print("Waiting ");
      lcd.setCursor(0, 1);
      lcd.print(i);
      lcd.print(" Seconds");

      delay(500);
      digitalWrite(11, HIGH);
      delay(500);
      digitalWrite(11, LOW);

      int input = digitalRead(12);

      if (input == LOW) {
        sendMessage = 1;
        break;
      }
    }

    digitalWrite(11, LOW);
    Serial.println(sendMessage);
    if (sendMessage == 0) {
      lcd.clear();
      lcd.print("Sending SMS ");
      Send();

      lcd.clear();
      Serial.println("SMS Sent");
      lcd.print("SMS Sent");
      delay(2000);

      lcd.clear();
      lcd.print("Calling");
      delay(1000);
      callSomeone();
      Serial.println("Calling");


      delay(2000);

    } else {
      analogWrite(A5, LOW);
      lcd.clear();
      lcd.print("SMS cancelled..");
      delay(2000);
      sendMessage = 0;
    }

    lcd.clear();
    lcd.print("System Ready");
  }
}

void gpsEvent()

{
  gpsString = "";
  Serial.println(gpsString);

  while (1) {
    while (gps.available() > 0)  //Serial incoming data from GPS
    {
      char inChar = (char)gps.read();
      gpsString += inChar;  //store incoming data from GPS to temparary string str[]
      i++;
      // Serial.print(inChar);
      if (i < 7) {
        if (gpsString[i - 1] != test[i - 1])  //check for right string
        {
          i = 0;
          gpsString = "";
        }
      }
      if (inChar == '\r') {
        if (i > 60) {
          gps_status = 1;
          break;
        } else {
          i = 0;
        }
      }
    }
    if (gps_status)
      break;
  }
}

void get_gps() {

  // lcd.clear();
  // lcd.print("Getting GPS Data");
  // lcd.setCursor(0, 1);
  // lcd.print("Please Wait.....");

  gps_status = 0;
  int x = 0;
  while (gps_status == 0) {
    
    gpsEvent();
    int str_lenth = i;
    coordinate2dec();
    i = 0;
    x = 0;
    str_lenth = 0;
  }
}

void show_coordinate() {
  if(latitude == 0.00)
  {
    resetFunc(); //call reset

  }
  lcd.clear();
  lcd.print("Getting GPS Data");
  lcd.setCursor(0, 1);
  lcd.print("Please Wait.....");
  delay(1000);
  lcd.clear();
  lcd.print("Lat:");
  lcd.print(latitude);
  lcd.setCursor(0, 1);
  lcd.print("Log:");
  lcd.print(logitude);
  Serial.print("Latitude:");
  Serial.println(latitude);
  Serial.print("Longitude:");
  Serial.println(logitude);
  Serial.print("Speed(in knots)=");
  Serial.println(Speed);

  delay(2000);

  lcd.clear();
  lcd.print("Speed(Knots):");
  lcd.setCursor(0, 1);
  lcd.print(Speed);

}
void coordinate2dec() {
  Serial.println(gpsString);

  String lat_degree = "";
  for (i = 19; i <= 20; i++)
    lat_degree += gpsString[i];

  String lat_minut = "";

  for (i = 21; i <= 27; i++)
    lat_minut += gpsString[i];

  String log_degree = "";

  for (i = 32; i <= 34; i++)
    log_degree += gpsString[i];

  String log_minut = "";

  for (i = 35; i <= 41; i++)
    log_minut += gpsString[i];


  Speed = "";
  for (i = 45; i < 48; i++)  //extract longitude from string
    Speed += gpsString[i];

  float minut = lat_minut.toFloat();
  minut = minut / 60;
  float degree = lat_degree.toFloat();
  latitude = degree + minut;
  minut = log_minut.toFloat();
  minut = minut / 60;
  degree = log_degree.toFloat();
  logitude = degree + minut;
}
void Send() {
  Serial1.println("AT");

  delay(500);

  serialPrint();


  Serial1.println("AT+CMGF=1");

  delay(500);

  serialPrint();
  Serial1.print("AT+CMGS=");
  Serial1.print('"');
  Serial1.print("7558384824");  //mobile no. for SMS alert
  Serial1.println('"');

  delay(500);

  serialPrint();
  Serial1.print("Latitude:");
  Serial1.println(latitude);

  delay(500);

  serialPrint();
  Serial1.print(" longitude:");
  Serial1.println(logitude);

  delay(500);

  serialPrint();
  Serial1.print(" Speed:");
  Serial1.print(Speed);
  Serial1.println("Knots");

  delay(500);

  serialPrint();
  Serial1.print("http://maps.google.com/maps?&z=15&mrt=yp&t=k&q=");
  Serial1.print(latitude, 6);
  Serial1.print("+");  //28.612953, 77.231545   //28.612953,77.2293563
  Serial1.print(logitude, 6);
  Serial1.write(26);

  delay(2000);

  serialPrint();
}
void serialPrint() {
  while (Serial1.available() > 0) {
    Serial.print(Serial1.read());
  }
}

void callSomeone() {
  // REPLACE THE X's WITH THE NUMER YOU WANT TO DIAL
  // USE INTERNATIONAL FORMAT CODE FOR MOBILE NUMBERS
  Serial1.println("ATD+917558384824;");

  delay(100);
  serialPrint();


  Serial.println();

  // In this example, the call only last 30 seconds
  // You can edit the phone call duration in the delay time
  delay(30000);
  // AT command to hang up
  Serial1.println("ATH");  // hang up
  serialPrint();
}
